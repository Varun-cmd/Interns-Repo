package Config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.Customizer;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.core.userdetails.User;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.provisioning.InMemoryUserDetailsManager;
import org.springframework.security.web.SecurityFilterChain;

@Configuration
@EnableWebSecurity
public class SecurityConfig {
	
	public UserDetailsService userDetails(PasswordEncoder encoder) {
		UserDetails admin =  User.withUsername("Mruali").password(encoder.encode("123")).build();
		UserDetails user =  User.withUsername("Bobby").password(encoder.encode("456")).build();
		
		return new InMemoryUserDetailsManager(admin, user);
	}
	
	 @Bean
	    SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {

	        http.csrf(csrf-> csrf.disable())
	                .authorizeHttpRequests((authorize) -> {
	                    authorize.requestMatchers("/secure/rest/welcome").permitAll()
	                    .requestMatchers("/secure/rest/getUsers").authenticated();
	                }).httpBasic(Customizer.withDefaults());
	        return http.build();
	    }
	
	public PasswordEncoder passwordEncoder() {
		return new BCryptPasswordEncoder();
	}
	

}
